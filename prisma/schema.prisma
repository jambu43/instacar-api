// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modèles pour l'application de taxi InstaCar

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  phone     String   @unique
  gender    Gender
  role      UserRole @default(PASSENGER)
  isVerified Boolean @default(false)
  emailVerified Boolean @default(false) // Email vérifié via OTP
  
  // Informations d'adresse (étape 2)
  address   String?
  city      String?
  commune   String?
  profilePhoto String?
  
  // État de l'inscription
  isProfileComplete Boolean @default(false)
  
  // Tokens d'authentification
  refreshToken String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  driver    Driver?
  rides     Ride[]    @relation("PassengerRides")
  reviews   Review[]  @relation("PassengerReviews")
  otpCodes  OtpCode[]
  notifications Notification[]
  pushTokens PushToken[]
  notificationPreferences NotificationPreferences?
}

model Driver {
  id            Int      @id @default(autoincrement())
  userId        Int      @unique
  user          User     @relation(fields: [userId], references: [id])
  licenseNumber String   @unique
  vehicleId     Int      @unique
  vehicle       Vehicle  @relation(fields: [vehicleId], references: [id])
  
  // Informations d'identité du chauffeur
  fullName      String
  phone         String   @unique
  profilePhoto  String?  // URL de la photo de profil
  identityDocument String? // URL du document d'identité (permis ou carte d'identité)
  isIdentityComplete Boolean @default(false)
  
  // Statut et localisation
  isAvailable   Boolean  @default(true)
  currentLat    Float?
  currentLng    Float?
  lastLocationUpdate DateTime?
  rating        Float    @default(0)
  totalRides    Int      @default(0)
  
  // État de l'inscription
  isRegistrationComplete Boolean @default(false)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  rides         Ride[]   @relation("DriverRides")
  reviews       Review[] @relation("DriverReviews")
  notifications Notification[]
  location      Location?
  locationHistory LocationHistory[]
}

model Vehicle {
  id          Int      @id @default(autoincrement())
  brand       String
  model       String
  year        Int
  color       String
  plateNumber String   @unique
  capacity    Int      @default(4)
  isActive    Boolean  @default(true)
  
  // Informations supplémentaires pour l'inscription chauffeur
  city        String   // Ville d'enregistrement
  vehicleType VehicleType // PROPRIETAIRE ou LOCATION
  isRegistrationComplete Boolean @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  driver      Driver?
}

model Ride {
  id              Int        @id @default(autoincrement())
  passengerId     Int
  passenger       User       @relation("PassengerRides", fields: [passengerId], references: [id])
  driverId        Int?
  driver          Driver?    @relation("DriverRides", fields: [driverId], references: [id])
  pickupLat       Float
  pickupLng       Float
  pickupAddress   String
  dropoffLat      Float
  dropoffLng      Float
  dropoffAddress  String
  distance        Float?     // en km
  duration        Int?       // en minutes
  price           Decimal    @db.Decimal(10, 2)
  status          RideStatus @default(REQUESTED)
  requestedAt     DateTime   @default(now())
  acceptedAt      DateTime?
  startedAt       DateTime?
  completedAt     DateTime?
  cancelledAt     DateTime?
  cancelReason    String?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  
  // Relations
  review         Review?
  notifications  Notification[]
}

model Review {
  id        Int      @id @default(autoincrement())
  rideId    Int      @unique
  ride      Ride     @relation(fields: [rideId], references: [id])
  passengerId Int
  passenger User     @relation("PassengerReviews", fields: [passengerId], references: [id])
  driverId  Int
  driver    Driver   @relation("DriverReviews", fields: [driverId], references: [id])
  rating    Int      // 1-5 étoiles
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OtpCode {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  code      String   // Code OTP (5 chiffres)
  type      OtpType  // EMAIL, SMS, WHATSAPP
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Notification {
  id          Int              @id @default(autoincrement())
  userId      Int
  user        User             @relation(fields: [userId], references: [id])
  type        NotificationType
  title       String
  message     String
  data        Json?            // Données supplémentaires (rideId, driverId, etc.)
  isRead      Boolean          @default(false)
  readAt      DateTime?
  createdAt   DateTime         @default(now())
  
  // Relations optionnelles
  rideId      Int?
  ride        Ride?            @relation(fields: [rideId], references: [id])
  driverId    Int?
  driver      Driver?          @relation(fields: [driverId], references: [id])
}

model Location {
  id          Int      @id @default(autoincrement())
  driverId    Int      @unique
  driver      Driver   @relation(fields: [driverId], references: [id])
  latitude    Float
  longitude   Float
  accuracy    Float?   // Précision en mètres
  speed       Float?   // Vitesse en m/s
  heading     Float?   // Direction en degrés (0-360)
  altitude    Float?   // Altitude en mètres
  address     String?  // Adresse formatée
  timestamp   DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([driverId])
}

model LocationHistory {
  id          Int      @id @default(autoincrement())
  driverId    Int
  driver      Driver   @relation(fields: [driverId], references: [id])
  latitude    Float
  longitude   Float
  accuracy    Float?   // Précision en mètres
  speed       Float?   // Vitesse en m/s
  heading     Float?   // Direction en degrés (0-360)
  altitude    Float?   // Altitude en mètres
  address     String?  // Adresse formatée
  timestamp   DateTime @default(now())
  
  @@index([driverId, timestamp])
}

model PushToken {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  token       String   @unique // Token FCM
  deviceId    String?  // ID unique de l'appareil
  platform    Platform // ANDROID, IOS, WEB
  isActive    Boolean  @default(true)
  lastUsed    DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId, platform])
}

model NotificationPreferences {
  id                    Int      @id @default(autoincrement())
  userId                Int      @unique
  user                  User     @relation(fields: [userId], references: [id])
  rideNotifications     Boolean  @default(true)
  promotionalNotifications Boolean @default(true)
  systemNotifications   Boolean  @default(true)
  emailNotifications    Boolean  @default(true)
  smsNotifications      Boolean  @default(false)
  pushNotifications     Boolean  @default(true)
  enablePushNotifications Boolean @default(true)
  enableRideNotifications Boolean @default(true)
  enablePromotionalNotifications Boolean @default(true)
  quietHoursStart       String?  // Format HH:MM
  quietHoursEnd         String?  // Format HH:MM
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

// Enums
enum UserRole {
  PASSENGER
  DRIVER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum OtpType {
  EMAIL
  SMS
  WHATSAPP
}

enum VehicleType {
  PROPRIETAIRE  // Voiture personnelle
  LOCATION      // Voiture louée
}

enum RideStatus {
  REQUESTED    // Course demandée
  SEARCHING    // Recherche de chauffeur
  ACCEPTED     // Chauffeur accepté
  ARRIVING     // Chauffeur en route
  IN_PROGRESS  // Course en cours
  COMPLETED    // Course terminée
  CANCELLED    // Course annulée
}

enum NotificationType {
  RIDE_REQUESTED     // Nouvelle demande de course
  RIDE_ACCEPTED      // Course acceptée par un chauffeur
  RIDE_STARTED       // Course commencée
  RIDE_COMPLETED     // Course terminée
  RIDE_CANCELLED     // Course annulée
  DRIVER_ARRIVING    // Chauffeur en route
  DRIVER_ARRIVED     // Chauffeur arrivé
  PAYMENT_SUCCESS    // Paiement réussi
  PAYMENT_FAILED     // Paiement échoué
  SYSTEM_MESSAGE     // Message système
  PROMOTION          // Promotion ou offre spéciale
}

enum Platform {
  ANDROID
  IOS
  WEB
}
