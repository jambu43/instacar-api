#!/bin/bash

echo "üö® Test des erreurs sp√©cifiques Postman - InstaCar API"
echo "====================================================="
echo ""

# V√©rifier si l'application est d√©marr√©e
if ! curl -s http://localhost:3000 > /dev/null 2>&1; then
    echo "‚ùå L'application n'est pas d√©marr√©e"
    echo "   D√©marrez-la avec: pnpm run start:dev"
    exit 1
fi

echo "‚úÖ Application d√©marr√©e sur http://localhost:3000"
echo ""

echo "üîç TEST 1 : JSON invalide"
echo "========================"

# Test avec JSON invalide
echo "üì§ Test avec JSON invalide..."
invalid_json_response=$(curl -s -w "\n%{http_code}" -X POST http://localhost:3000/drivers/register-vehicle \
  -H "Content-Type: application/json" \
  -d '{"city": "Paris", "vehicleType": "PROPRIETAIRE", "brand": "Toyota", "model": "Corolla", "color": "Rouge", "year": 2021, "plateNumber": "TEST-INVALID-JSON",}')

invalid_json_http_code=$(echo "$invalid_json_response" | tail -n1)
invalid_json_response_body=$(echo "$invalid_json_response" | sed '$d')

echo "üì• R√©ponse (HTTP $invalid_json_http_code):"
echo "$invalid_json_response_body" | jq . 2>/dev/null || echo "$invalid_json_response_body"
echo ""

echo "üîç TEST 2 : Content-Type manquant"
echo "================================="

# Test sans Content-Type
echo "üì§ Test sans Content-Type..."
no_content_type_response=$(curl -s -w "\n%{http_code}" -X POST http://localhost:3000/drivers/register-vehicle \
  -d '{"city": "Paris", "vehicleType": "PROPRIETAIRE", "brand": "Toyota", "model": "Corolla", "color": "Rouge", "year": 2021, "plateNumber": "TEST-NO-CONTENT-TYPE"}')

no_content_type_http_code=$(echo "$no_content_type_response" | tail -n1)
no_content_type_response_body=$(echo "$no_content_type_response" | sed '$d')

echo "üì• R√©ponse (HTTP $no_content_type_http_code):"
echo "$no_content_type_response_body" | jq . 2>/dev/null || echo "$no_content_type_response_body"
echo ""

echo "üîç TEST 3 : Donn√©es manquantes"
echo "============================="

# Test avec donn√©es manquantes
echo "üì§ Test avec donn√©es manquantes..."
missing_data_response=$(curl -s -w "\n%{http_code}" -X POST http://localhost:3000/drivers/register-vehicle \
  -H "Content-Type: application/json" \
  -d '{"city": "Paris", "vehicleType": "PROPRIETAIRE"}')

missing_data_http_code=$(echo "$missing_data_response" | tail -n1)
missing_data_response_body=$(echo "$missing_data_response" | sed '$d')

echo "üì• R√©ponse (HTTP $missing_data_http_code):"
echo "$missing_data_response_body" | jq . 2>/dev/null || echo "$missing_data_response_body"
echo ""

echo "üîç TEST 4 : URL incorrecte"
echo "=========================="

# Test avec URL incorrecte
echo "üì§ Test avec URL incorrecte..."
wrong_url_response=$(curl -s -w "\n%{http_code}" -X POST http://localhost:3000/drivers/register-vehicle-wrong \
  -H "Content-Type: application/json" \
  -d '{"city": "Paris", "vehicleType": "PROPRIETAIRE", "brand": "Toyota", "model": "Corolla", "color": "Rouge", "year": 2021, "plateNumber": "TEST-WRONG-URL"}')

wrong_url_http_code=$(echo "$wrong_url_response" | tail -n1)
wrong_url_response_body=$(echo "$wrong_url_response" | sed '$d')

echo "üì• R√©ponse (HTTP $wrong_url_http_code):"
echo "$wrong_url_response_body" | jq . 2>/dev/null || echo "$wrong_url_response_body"
echo ""

echo "üîç TEST 5 : M√©thode incorrecte"
echo "=============================="

# Test avec m√©thode GET au lieu de POST
echo "üì§ Test avec m√©thode GET..."
wrong_method_response=$(curl -s -w "\n%{http_code}" -X GET http://localhost:3000/drivers/register-vehicle \
  -H "Content-Type: application/json" \
  -d '{"city": "Paris", "vehicleType": "PROPRIETAIRE", "brand": "Toyota", "model": "Corolla", "color": "Rouge", "year": 2021, "plateNumber": "TEST-WRONG-METHOD"}')

wrong_method_http_code=$(echo "$wrong_method_response" | tail -n1)
wrong_method_response_body=$(echo "$wrong_method_response" | sed '$d')

echo "üì• R√©ponse (HTTP $wrong_method_http_code):"
echo "$wrong_method_response_body" | jq . 2>/dev/null || echo "$wrong_method_response_body"
echo ""

echo "üîç TEST 6 : Donn√©es dupliqu√©es"
echo "=============================="

# Cr√©er un v√©hicule pour tester les duplications
vehicle_data='{
  "city": "Paris",
  "vehicleType": "PROPRIETAIRE",
  "brand": "Toyota",
  "model": "Corolla",
  "color": "Rouge",
  "year": 2021,
  "plateNumber": "TEST-DUPLICATE-001"
}'

echo "üì§ Cr√©ation du v√©hicule pour test de duplication..."
vehicle_response=$(curl -s -w "\n%{http_code}" -X POST http://localhost:3000/drivers/register-vehicle \
  -H "Content-Type: application/json" \
  -d "$vehicle_data")

vehicle_http_code=$(echo "$vehicle_response" | tail -n1)
vehicle_response_body=$(echo "$vehicle_response" | sed '$d')

if [ "$vehicle_http_code" != "201" ]; then
    echo "‚ùå Erreur lors de la cr√©ation du v√©hicule"
    exit 1
fi

vehicle_id=$(echo "$vehicle_response_body" | jq -r '.vehicle.id')
echo "‚úÖ V√©hicule cr√©√© avec ID: $vehicle_id"

# Essayer de cr√©er un autre v√©hicule avec la m√™me plaque
echo "üì§ Tentative de cr√©ation d'un v√©hicule avec la m√™me plaque..."
duplicate_plate_response=$(curl -s -w "\n%{http_code}" -X POST http://localhost:3000/drivers/register-vehicle \
  -H "Content-Type: application/json" \
  -d "$vehicle_data")

duplicate_plate_http_code=$(echo "$duplicate_plate_response" | tail -n1)
duplicate_plate_response_body=$(echo "$duplicate_plate_response" | sed '$d')

echo "üì• R√©ponse (HTTP $duplicate_plate_http_code):"
echo "$duplicate_plate_response_body" | jq . 2>/dev/null || echo "$duplicate_plate_response_body"
echo ""

echo "üîç TEST 7 : Enregistrement chauffeur avec donn√©es dupliqu√©es"
echo "============================================================"

# Enregistrer un chauffeur
driver_data='{
  "fullName": "Test Duplicate Driver",
  "phone": "+33123456794",
  "licenseNumber": "123456789012353",
  "identityDocument": "documents/test.pdf"
}'

echo "üì§ Enregistrement du premier chauffeur..."
driver_response=$(curl -s -w "\n%{http_code}" -X POST http://localhost:3000/drivers/register-driver/$vehicle_id \
  -H "Content-Type: application/json" \
  -d "$driver_data")

driver_http_code=$(echo "$driver_response" | tail -n1)
driver_response_body=$(echo "$driver_response" | sed '$d')

if [ "$driver_http_code" != "201" ]; then
    echo "‚ùå Erreur lors de l'enregistrement du chauffeur"
    exit 1
fi

echo "‚úÖ Premier chauffeur enregistr√©"

# Essayer d'enregistrer un autre chauffeur avec le m√™me t√©l√©phone
echo "üì§ Tentative d'enregistrement avec t√©l√©phone dupliqu√©..."
duplicate_phone_data='{
  "fullName": "Test Duplicate Phone",
  "phone": "+33123456794",
  "licenseNumber": "123456789012354",
  "identityDocument": "documents/test.pdf"
}'

duplicate_phone_response=$(curl -s -w "\n%{http_code}" -X POST http://localhost:3000/drivers/register-driver/$vehicle_id \
  -H "Content-Type: application/json" \
  -d "$duplicate_phone_data")

duplicate_phone_http_code=$(echo "$duplicate_phone_response" | tail -n1)
duplicate_phone_response_body=$(echo "$duplicate_phone_response" | sed '$d')

echo "üì• R√©ponse (HTTP $duplicate_phone_http_code):"
echo "$duplicate_phone_response_body" | jq . 2>/dev/null || echo "$duplicate_phone_response_body"
echo ""

echo "üîÑ R√©sum√© des tests :"
echo "===================="
echo "Test 1 (JSON invalide): $([ "$invalid_json_http_code" = "400" ] && echo "‚úÖ PASS" || echo "‚ùå FAIL - HTTP $invalid_json_http_code")"
echo "Test 2 (Content-Type manquant): $([ "$no_content_type_http_code" = "400" ] && echo "‚úÖ PASS" || echo "‚ùå FAIL - HTTP $no_content_type_http_code")"
echo "Test 3 (Donn√©es manquantes): $([ "$missing_data_http_code" = "400" ] && echo "‚úÖ PASS" || echo "‚ùå FAIL - HTTP $missing_data_http_code")"
echo "Test 4 (URL incorrecte): $([ "$wrong_url_http_code" = "404" ] && echo "‚úÖ PASS" || echo "‚ùå FAIL - HTTP $wrong_url_http_code")"
echo "Test 5 (M√©thode incorrecte): $([ "$wrong_method_http_code" = "405" ] && echo "‚úÖ PASS" || echo "‚ùå FAIL - HTTP $wrong_method_http_code")"
echo "Test 6 (Plaque dupliqu√©e): $([ "$duplicate_plate_http_code" = "409" ] && echo "‚úÖ PASS" || echo "‚ùå FAIL - HTTP $duplicate_plate_http_code")"
echo "Test 7 (T√©l√©phone dupliqu√©): $([ "$duplicate_phone_http_code" = "409" ] && echo "‚úÖ PASS" || echo "‚ùå FAIL - HTTP $duplicate_phone_http_code")"
echo ""

echo "üí° Solutions pour Postman :"
echo "=========================="
echo "1. V√©rifiez que le JSON est valide (pas de virgule finale)"
echo "2. Assurez-vous que Content-Type est application/json"
echo "3. V√©rifiez que toutes les donn√©es requises sont pr√©sentes"
echo "4. V√©rifiez que l'URL est correcte"
echo "5. Utilisez la m√©thode POST"
echo "6. Utilisez des donn√©es uniques (t√©l√©phone, permis, plaque)"
echo "7. V√©rifiez que le document d'identit√© existe"
echo ""

echo "üîÑ Tests termin√©s !" 